(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[518], { 47943: function () { }, 55024: function () { }, 23480: function (e, t, n) { "use strict"; n.d(t, { sendPiTransaction: function () { return s } }); var o = n(69108); async function s(e, t, n, s, a) { let r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 1; console.log("Attempt ".concat(r, ": Sending ").concat(s, " PI from ").concat(e, " to ").concat(n)); try { let r = new o.Server("http://4.194.35.14:31401"), i = o.Keypair.fromSecret(t), [c, l] = await Promise.all([r.loadAccount(e), r.fetchBaseFee()]); s = "sweep" == a ? +c.balances[0].balance - 1 : +s, s = Number(s).toFixed(7), console.log("amount here", s); let u = l.toString(); console.log("Base Fee: ".concat(l, ", Using Fee: ").concat(u)); let d = new o.TransactionBuilder(c, { fee: u, networkPassphrase: "Pi Network" }).addOperation(o.Operation.payment({ destination: n, asset: o.Asset.native(), amount: s.toString() })).setTimeout(30).build(); d.sign(i); let h = await r.submitTransaction(d); if (h && h.hash) return { success: !0, txHash: h.hash, error: null, amount: s }; throw console.log("result", h), Error("Transaction submitted but not confirmed successful") } catch (n) { var i, c, l; console.log(n); let e = null === (l = n.response) || void 0 === l ? void 0 : null === (c = l.data) || void 0 === c ? void 0 : null === (i = c.extras) || void 0 === i ? void 0 : i.result_codes, t = e ? JSON.stringify(e) : n.message; return { errorMessage: n, success: !1, txHash: null, amount: s, error: t || "Transaction failed" } } } } }]);